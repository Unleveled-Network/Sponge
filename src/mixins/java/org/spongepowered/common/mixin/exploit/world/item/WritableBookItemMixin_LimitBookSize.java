/*
 * This file is part of Sponge, licensed under the MIT License (MIT).
 *
 * Copyright (c) SpongePowered <https://www.spongepowered.org>
 * Copyright (c) contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package org.spongepowered.common.mixin.exploit.world.item;

import net.minecraft.nbt.CompoundTag;
import net.minecraft.nbt.ListTag;
import net.minecraft.world.item.WritableBookItem;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Constant;
import org.spongepowered.asm.mixin.injection.Inject;
import org.spongepowered.asm.mixin.injection.ModifyConstant;
import org.spongepowered.asm.mixin.injection.Redirect;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfoReturnable;
import org.spongepowered.common.applaunch.config.core.SpongeConfigs;

import java.nio.charset.StandardCharsets;
import java.util.stream.IntStream;

@Mixin(WritableBookItem.class)
public abstract class WritableBookItemMixin_LimitBookSize {

    @Redirect(
            method = "makeSureTagIsValid",
            at = @At(value = "INVOKE", remap = false, target = "Ljava/lang/String;length()I")
    )
    private static int impl$useByteLength(final String s) {
        return s.getBytes(StandardCharsets.UTF_8).length;
    }

    @ModifyConstant(
            method = "makeSureTagIsValid",
            constant = @Constant(intValue = 32767)
    )
    private static int impl$useMaxBookPageSizeFromConfig(final int maxBookPageSize) {
        return SpongeConfigs.getCommon().get().exploits.maxBookPageSize;
    }

    @Inject(
            method = "makeSureTagIsValid",
            cancellable = true,
            at = @At(value = "RETURN")
    )
    private static void impl$useMaxBookSizeFromConfig(final CompoundTag p_150930_0_, final CallbackInfoReturnable<Boolean> cir) {
        if (cir.getReturnValue()) {
            final ListTag listnbt = p_150930_0_.getList("pages", 8);
            final int size = IntStream.range(0, listnbt.size()).mapToObj(listnbt::getString).mapToInt(s -> s.getBytes(StandardCharsets.UTF_8).length).sum();
            if (size > SpongeConfigs.getCommon().get().exploits.maxBookSize) {
                cir.setReturnValue(false);
            }
        }
    }

}
